table2 <- process_table(tables[2])
table3 <- process_table(tables[3])
table4 <- process_table(tables[4])
table5 <- process_table(tables[5])
table6 <- process_table(tables[6])
# Combine all the tables
combined_wiki_tables <- bind_rows(table1, table2, table3, table4, table5, table6)
# Function to clean up the 'Period active' column
clean_period_active <- function(period) {
period <- gsub("\\[.*?\\]", "", period)  # Remove content in brackets
period <- gsub("present", "2023", period) # Replace 'present' with '2023'
period
}
# Function to clean up the 'Release-year of first charted record' column
clean_release_year <- function(year) {
str_extract(year, "\\d{4}") # Extract the first four-digit number
}
# Function to clean up the 'Genre' column
clean_genre <- function(genre) {
gsub("\\[.*?\\]", "", genre) # Remove content in brackets
}
# Function to clean up the 'Total certified units' column
clean_total_units <- function(units) {
str_extract(units, "\\d+\\.?\\d*") # Extract the first number (integer or decimal)
}
# Function to clean up the 'Claimed sales' column
clean_claimed_sales <- function(sales) {
# Extract the first number (integer or decimal)
as.numeric(str_extract(sales, "\\d+\\.?\\d*"))
}
# Rename the 'Total certified units' column and then apply the cleaning functions
cleaned_wiki_table <- combined_wiki_tables %>%
rename(`Total certified units (US Million)` = `Total certified units(from available markets)[b]`,
`Claimed sales (US Million)` = `Claimed sales`) %>%
mutate(`Period active` = clean_period_active(`Period active`),
`Release-year of first charted record` = clean_release_year(`Release-year of first charted record`),
Genre = clean_genre(Genre),
`Total certified units (US Million)` = clean_total_units(`Total certified units (US Million)`),
`Claimed sales (US Million)` = clean_claimed_sales(`Claimed sales (US Million)`))
# Excluding the genres column since we already have that information from Spotify
# Selecting the desired columns from wiki_data (excluding 'Genre')
wiki_data_selected <- select(cleaned_wiki_table, -Genre)
# Performing a left join with the modified wiki_data
combined_data <- left_join(full_spotify_data, wiki_data_selected, by = "Artist")
cleaned_data <- combined_data
# Clean 'Period Active'
cleaned_data <- cleaned_data %>%
mutate(
Start_Year = as.numeric(str_extract(`Period active`, "^[0-9]{4}")),
End_Year = as.numeric(str_extract(`Period active`, "[0-9]{4}$"))
)
group_genre <- function(genre) {
if (str_detect(genre, "classic|glam")) {
return("Classic Rock")
} else if (str_detect(genre, "g funk|hip hop|rap|r&b")) {
return("HipHop_R&B_Rap")
} else if (str_detect(genre, "alternative|indie|soft rock|irish rock|grunge")) {
return("Alternative Rock")
} else if (str_detect(genre, "hard|metal")) {
return("Hard Rock/Metal")
} else if (str_detect(genre, "punk")) {
return("Punk Rock")
} else if (str_detect(genre, "rock-and-roll")) {
return("Rock and Roll")
} else if (str_detect(genre, "piano rock")) {
return("Piano Rock")
} else if (str_detect(genre, "blues")) {
return("Blues")
} else if (str_detect(genre, "funk")) {
return("Funk")
} else if (str_detect(genre, "reggae")) {
return("Reggae")
} else if (str_detect(genre, "pop")) {
return("Pop")
} else if (str_detect(genre, "soul")) {
return("Soul")
} else if (str_detect(genre, "country")) {
return("Country")
} else {
return("Other")
}
}
# Apply the function to the 'Genres' column
cleaned_data <- cleaned_data %>%
mutate(Grouped_Genre = sapply(Genres, group_genre))
# Create 'Period Active' as a new column in 'Start_Year - End_Year' format
cleaned_data <- cleaned_data %>%
mutate(Period_Active = paste(Start_Year, End_Year, sep = " - "))
# Replace NA with appropriate representation if needed
cleaned_data$Period_Active[is.na(cleaned_data$Start_Year) | is.na(cleaned_data$End_Year)] <- "NA"
# Rearranging columns in the specified order
f_data <- cleaned_data %>%
select(
Artist,
Rolling_Stones_Rank,
RS_Rank_Year,
Spotify_Rank,
Spotify_Rank_Year,
Change_in_Rank,
Popularity,
Followers,
Period_Active,
`Release-year of first charted record`,
`Total certified units (US Million)`,
Grouped_Genre
)
# Reading data back
spotify_sample_data <- read.csv("spotify_sample_data.csv", stringsAsFactors = FALSE, check.names = FALSE)
#Select Required Columns
spotify_selected <- select(spotify_sample_data, Artist, Valence, Danceability, Speechiness)
# Merge the datasets using a full join
merged_data <- merge(f_data, spotify_selected, by = "Artist", all.x = TRUE)
write.csv(merged_data, "final_data.csv", row.names = FALSE)
# Reading data back
final_data <- read.csv("final_data.csv", stringsAsFactors = FALSE, check.names = FALSE)
genre_data <- final_data %>%
group_by(Grouped_Genre) %>%
summarise(Average_RS_rank = mean(Rolling_Stones_Rank),
Average_spotify_rank = mean(Spotify_Rank))
# Reshape data to long format
grouped_data_long <- genre_data %>%
pivot_longer(cols = c(Average_RS_rank, Average_spotify_rank), names_to = "RankType", values_to = "Rank")
grouped_data_long$RankType <- as.factor(grouped_data_long$RankType)
# Reshape data to long format
grouped_data_long %>%
ggplot(aes(x = RankType, y = Rank, group = Grouped_Genre, color = Grouped_Genre)) + # Map aesthetics globally
geom_line() + # Ensure lines are drawn
geom_point() +
geom_text_repel(aes(label = Grouped_Genre), nudge_y = 1) +
labs(title = "Rank Changes from Rolling Stone 2010 to Spotify 2023",
x = "Time",
y = "Rank") +
scale_x_discrete(labels = c("Rolling Stone", "Spotify")) +
scale_y_continuous(breaks = seq(0, max(grouped_data_long$Rank, na.rm = TRUE) + 5, 5)) +
scale_y_reverse() +
guides(color = guide_legend(override.aes = list(linetype = "solid"))) # Override legend to show solid lines
# Top 20 artists with max increase in rank
max_increase <- final_data %>%
top_n(10, Change_in_Rank)
# Visualizations
ggplot(max_increase, aes(x = reorder(Artist, Change_in_Rank), y = Change_in_Rank, fill = Grouped_Genre)) +
geom_bar(stat = "identity") +
labs(title = "Artists with Maximum Increase in Rank",
x = "Artist",
y = "Change in Rank",
fill = "Genre") + # This changes the legend title for `fill`
coord_flip()
# Top 20 artists with max decrease in rank
max_decrease <- final_data %>%
top_n(10, desc(Change_in_Rank))
# Visualizations
ggplot(max_decrease, aes(x = reorder(Artist, Change_in_Rank), y = Change_in_Rank, fill = Grouped_Genre)) +
geom_bar(stat = "identity") +
labs(title = "Artists with Maximum Decrease in Rank",
x = "Artist",
y = "Change in Rank",
fill = "Genre") + # This changes the legend title for `fill`
coord_flip()
# Visualizations
ggplot(least_change, aes(x = reorder(Artist, Change_in_Rank), y = Change_in_Rank, fill = Grouped_Genre)) +
geom_bar(stat = "identity", position = "identity", width = 0.5) +
labs(title = "Artists with Least Change in Rank",
x = "Artist",
y = "Change in Rank",
fill = "Genre") +
coord_flip() +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10), limits = c(-4, 4)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
theme_minimal() +
# This will add a small bar for artists with zero change in rank
geom_bar(data = subset(least_change, Change_in_Rank == 0), aes(y = 0.1), stat = "identity", position = "identity", width = 0.5) +
geom_bar(data = subset(least_change, Change_in_Rank == 0), aes(y = -0.1), stat = "identity", position = "identity", width = 0.5)
# Artist with least change in rank
least_change <- final_data %>%
filter(abs(Change_in_Rank)<=4)
# Visualizations
ggplot(least_change, aes(x = reorder(Artist, Change_in_Rank), y = Change_in_Rank, fill = Grouped_Genre)) +
geom_bar(stat = "identity", position = "identity", width = 0.5) +
labs(title = "Artists with Least Change in Rank",
x = "Artist",
y = "Change in Rank",
fill = "Genre") +
coord_flip() +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10), limits = c(-4, 4)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
theme_minimal() +
# This will add a small bar for artists with zero change in rank
geom_bar(data = subset(least_change, Change_in_Rank == 0), aes(y = 0.1), stat = "identity", position = "identity", width = 0.5) +
geom_bar(data = subset(least_change, Change_in_Rank == 0), aes(y = -0.1), stat = "identity", position = "identity", width = 0.5)
# Create the 'Group' column
final_data$Group <- ifelse(final_data$Change_in_Rank > 0, 'Increase',
ifelse(final_data$Change_in_Rank < 0, 'Decrease', 'Constant'))
# Filter the data to include only the 'Increase' and 'Decrease' groups and exclude rows with NA in audio features
filtered_data <- final_data %>%
filter(Group %in% c('Increase', 'Decrease') & !is.na(Valence) & !is.na(Danceability) & !is.na(Speechiness))
# 1. Grouped Boxplots
ggplot(filtered_data, aes(x = Group, y = Valence, fill = Group)) +
geom_boxplot() +
labs(title = 'Valence for Increase vs Decrease Groups', x = 'Group', y = 'Valence')
ggplot(filtered_data, aes(x = Group, y = Danceability, fill = Group)) +
geom_boxplot() +
labs(title = 'Danceability for Increase vs Decrease Groups', x = 'Group', y = 'Danceability')
ggplot(filtered_data, aes(x = Group, y = Speechiness, fill = Group)) +
geom_boxplot() +
labs(title = 'Speechiness for Increase vs Decrease Groups', x = 'Group', y = 'Speechiness')
# 2. Bar Plots for Average Values
filtered_data %>%
group_by(Group) %>%
summarise(Avg_Valence = mean(Valence, na.rm = TRUE),
Avg_Danceability = mean(Danceability, na.rm = TRUE),
Avg_Speechiness = mean(Speechiness, na.rm = TRUE)) %>%
gather(key = "Feature", value = "Average", -Group) %>%
ggplot(aes(x = Group, y = Average, fill = Feature)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = 'Average Audio Features for Increase vs Decrease Groups', x = 'Group', y = 'Average Value')
ggplot(filtered_data, aes(x = Valence, fill = Group)) +
geom_density(alpha = 0.5) +
labs(title = 'Density of Valence by Group', x = 'Valence', y = 'Density')
# Convert relevant columns to numeric if they are not already
numeric_data <- filtered_data[, c('Valence', 'Danceability', 'Speechiness', 'Popularity', 'Followers')]
numeric_data[] <- lapply(numeric_data, function(x) as.numeric(as.character(x)))
# Calculate the correlation matrix
correlation_data <- cor(numeric_data, use = "complete.obs")
# Function to calculate p-values of correlations
cor_pvalues <- function(correlation_matrix, data) {
n <- ncol(correlation_matrix)
p_matrix <- matrix(NA, n, n)
diag(p_matrix) <- 0
for (i in 1:(n-1)) {
for (j in (i+1):n) {
test <- cor.test(data[,i], data[,j])
p_matrix[i,j] <- test$p.value
p_matrix[j,i] <- test$p.value
}
}
return(p_matrix)
}
# Get the p-values
p_values <- cor_pvalues(correlation_data, numeric_data)
p_values
# Plot the correlation matrix with corrplot
corrplot(correlation_data, method = "color", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45,
col = colorRampPalette(c("#BB0000", "#EEAAAA", "#FFFFFF", "#AAAAEE", "#0000BB"))(200))
# Convert relevant columns to numeric if they are not already
numeric_data <- filtered_data[, c('Valence', 'Danceability', 'Speechiness', 'Popularity', 'Followers')]
numeric_data[] <- lapply(numeric_data, function(x) as.numeric(as.character(x)))
# Calculate the correlation matrix
correlation_data <- cor(numeric_data, use = "complete.obs")
# Function to calculate p-values of correlations
cor_pvalues <- function(correlation_matrix, data) {
n <- ncol(correlation_matrix)
p_matrix <- matrix(NA, n, n)
diag(p_matrix) <- 0
for (i in 1:(n-1)) {
for (j in (i+1):n) {
test <- cor.test(data[,i], data[,j])
p_matrix[i,j] <- test$p.value
p_matrix[j,i] <- test$p.value
}
}
return(p_matrix)
}
# Get the p-values
p_values <- cor_pvalues(correlation_data, numeric_data)
# Plot the correlation matrix with corrplot
corrplot(correlation_data, method = "color", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45,
col = colorRampPalette(c("#BB0000", "#EEAAAA", "#FFFFFF", "#AAAAEE", "#0000BB"))(200))
# Reading data back
final_data <- read.csv("final_data.csv", stringsAsFactors = FALSE, check.names = FALSE)
genre_data <- final_data %>%
group_by(Grouped_Genre) %>%
summarise(Average_RS_rank = mean(Rolling_Stones_Rank),
Average_spotify_rank = mean(Spotify_Rank))
# Reshape data to long format
grouped_data_long <- genre_data %>%
pivot_longer(cols = c(Average_RS_rank, Average_spotify_rank), names_to = "RankType", values_to = "Rank")
grouped_data_long$RankType <- as.factor(grouped_data_long$RankType)
# Reshape data to long format
grouped_data_long %>%
ggplot(aes(x = RankType, y = Rank, group = Grouped_Genre, color = Grouped_Genre)) + # Map aesthetics globally
geom_line() + # Ensure lines are drawn
geom_point() +
geom_text_repel(aes(label = Grouped_Genre), nudge_y = 1) +
labs(title = "Genre Popularity Trends: 2010 vs. 2023",
x = "Time",
y = "Rank") +
scale_x_discrete(labels = c("Rolling Stone", "Spotify")) +
scale_y_continuous(breaks = seq(0, max(grouped_data_long$Rank, na.rm = TRUE) + 5, 5)) +
scale_y_reverse() +
guides(color = guide_legend(override.aes = list(linetype = "solid"))) # Override legend to show solid lines
# Reading data back
final_data <- read.csv("final_data.csv", stringsAsFactors = FALSE, check.names = FALSE)
genre_data <- final_data %>%
group_by(Grouped_Genre) %>%
summarise(Average_RS_rank = mean(Rolling_Stones_Rank),
Average_spotify_rank = mean(Spotify_Rank))
# Reshape data to long format
grouped_data_long <- genre_data %>%
pivot_longer(cols = c(Average_RS_rank, Average_spotify_rank), names_to = "RankType", values_to = "Rank")
grouped_data_long$RankType <- as.factor(grouped_data_long$RankType)
# Reshape data to long format
grouped_data_long %>%
ggplot(aes(x = RankType, y = Rank, group = Grouped_Genre, color = Grouped_Genre)) + # Map aesthetics globally
geom_line() + # Ensure lines are drawn
geom_point() +
geom_text_repel(aes(label = Grouped_Genre), nudge_y = 1) +
labs(title = "Genre Popularity Trends: 2010 vs. 2023",
x = "Time",
y = "Rank") +
scale_x_discrete(labels = c("2010", "2023")) +
scale_y_continuous(breaks = seq(0, max(grouped_data_long$Rank, na.rm = TRUE) + 5, 5)) +
scale_y_reverse() +
guides(color = guide_legend(override.aes = list(linetype = "solid"))) # Override legend to show solid lines
# Create the 'Group' column
final_data$Group <- ifelse(final_data$Change_in_Rank > 0, 'Increase',
ifelse(final_data$Change_in_Rank < 0, 'Decrease', 'Constant'))
# Filter the data to include only the 'Increase' and 'Decrease' groups and exclude rows with NA in audio features
filtered_data <- final_data %>%
filter(Group %in% c('Increase', 'Decrease') & !is.na(Valence) & !is.na(Danceability) & !is.na(Speechiness))
# Bar Plots for Average Values
filtered_data %>%
group_by(Group) %>%
summarise(Avg_Valence = mean(Valence, na.rm = TRUE),
Avg_Danceability = mean(Danceability, na.rm = TRUE),
Avg_Speechiness = mean(Speechiness, na.rm = TRUE)) %>%
gather(key = "Feature", value = "Average", -Group) %>%
ggplot(aes(x = Group, y = Average, fill = Feature)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = 'Average Audio Features for Increase vs Decrease Groups', x = 'Group', y = 'Average Value')
# Convert relevant columns to numeric if they are not already
numeric_data <- filtered_data[, c('Valence', 'Danceability', 'Speechiness', 'Popularity', 'Followers')]
numeric_data[] <- lapply(numeric_data, function(x) as.numeric(as.character(x)))
# Calculate the correlation matrix
correlation_data <- cor(numeric_data, use = "complete.obs")
# Function to calculate p-values of correlations
cor_pvalues <- function(correlation_matrix, data) {
n <- ncol(correlation_matrix)
p_matrix <- matrix(NA, n, n)
diag(p_matrix) <- 0
for (i in 1:(n-1)) {
for (j in (i+1):n) {
test <- cor.test(data[,i], data[,j])
p_matrix[i,j] <- test$p.value
p_matrix[j,i] <- test$p.value
}
}
return(p_matrix)
}
# Get the p-values
p_values <- cor_pvalues(correlation_data, numeric_data)
# Plot the correlation matrix with corrplot
corrplot(correlation_data, method = "color", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45,
col = colorRampPalette(c("#BB0000", "#EEAAAA", "#FFFFFF", "#AAAAEE", "#0000BB"))(200))
# Create the 'Group' column
final_data$Group <- ifelse(final_data$Change_in_Rank > 0, 'Increase',
ifelse(final_data$Change_in_Rank < 0, 'Decrease', 'Constant'))
# Filter the data to include only the 'Increase' and 'Decrease' groups and exclude rows with NA in audio features
filtered_data %>%
group_by(Group) %>%
summarise(Avg_Valence = mean(Valence, na.rm = TRUE),
Avg_Danceability = mean(Danceability, na.rm = TRUE),
Avg_Speechiness = mean(Speechiness, na.rm = TRUE)) %>%
gather(key = "Feature", value = "Average", -Group) %>%
ggplot(aes(x = Group, y = Average, fill = Feature)) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_manual(values = c("Danceability", "Speechiness", "Valence"),
labels = c("Danceability", "Speechiness", "Valence")) +
labs(title = 'Average Audio Features for Increase vs Decrease Groups',
x = 'Group',
y = 'Average Value') +
theme(plot.title = element_text(hjust = 0.5))
filtered_data %>%
group_by(Group) %>%
summarise(Avg_Valence = mean(Valence, na.rm = TRUE),
Avg_Danceability = mean(Danceability, na.rm = TRUE),
Avg_Speechiness = mean(Speechiness, na.rm = TRUE)) %>%
gather(key = "Feature", value = "Average", -Group) %>%
ggplot(aes(x = Group, y = Average, fill = Feature)) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_manual(values = c("Danceability", "Speechiness", "Valence"),
labels = c("Danceability", "Speechiness", "Valence")) +
labs(title = 'Average Audio Features for Increase vs Decrease Groups',
x = 'Group',
y = 'Average Value') +
theme(plot.title = element_text(hjust = 0.5))
filtered_data %>%
group_by(Group) %>%
summarise(Avg_Valence = mean(Valence, na.rm = TRUE),
Avg_Danceability = mean(Danceability, na.rm = TRUE),
Avg_Speechiness = mean(Speechiness, na.rm = TRUE)) %>%
gather(key = "Feature", value = "Average", -Group) %>%
ggplot(aes(x = Group, y = Average, fill = Feature)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = 'Average Audio Features for Increase vs Decrease Groups',
x = 'Group',
y = 'Average Value',
fill = 'Audio Feature') +  # This line sets the legend title
theme(plot.title = element_text(hjust = 0.5))
# Create the 'Group' column
final_data$Group <- ifelse(final_data$Change_in_Rank > 0, 'Increase',
ifelse(final_data$Change_in_Rank < 0, 'Decrease', 'Constant'))
# Filter the data to include only the 'Increase' and 'Decrease' groups and exclude rows with NA in audio features
filtered_data <- final_data %>%
filter(Group %in% c('Increase', 'Decrease') & !is.na(Valence) & !is.na(Danceability) & !is.na(Speechiness))
# Bar Plots for Average Values
filtered_data %>%
group_by(Group) %>%
summarise(Avg_Valence = mean(Valence, na.rm = TRUE),
Avg_Danceability = mean(Danceability, na.rm = TRUE),
Avg_Speechiness = mean(Speechiness, na.rm = TRUE)) %>%
gather(key = "Feature", value = "Average", -Group) %>%
ggplot(aes(x = Group, y = Average, fill = Feature)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = 'Average Audio Features for Artists that increase in Popularity vs. Artists that decreased in popularity', x = 'Group', y = 'Average Value')
filtered_data %>%
group_by(Group) %>%
summarise(Avg_Valence = mean(Valence, na.rm = TRUE),
Avg_Danceability = mean(Danceability, na.rm = TRUE),
Avg_Speechiness = mean(Speechiness, na.rm = TRUE)) %>%
gather(key = "Feature", value = "Average", -Group) %>%
ggplot(aes(x = Group, y = Average, fill = Feature)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = 'Average Audio Features for Increase vs Decrease Groups',
x = 'Group',
y = 'Average Value',
fill = 'Audio Feature') +  # This line sets the legend title
theme(plot.title = element_text(hjust = 0.5))
# Create the 'Group' column
final_data$Group <- ifelse(final_data$Change_in_Rank > 0, 'Increase',
ifelse(final_data$Change_in_Rank < 0, 'Decrease', 'Constant'))
# Filter the data to include only the 'Increase' and 'Decrease' groups and exclude rows with NA in audio features
filtered_data <- final_data %>%
filter(Group %in% c('Increase', 'Decrease') & !is.na(Valence) & !is.na(Danceability) & !is.na(Speechiness))
# Bar Plots for Average Values
filtered_data %>%
group_by(Group) %>%
summarise(Avg_Valence = mean(Valence, na.rm = TRUE),
Avg_Danceability = mean(Danceability, na.rm = TRUE),
Avg_Speechiness = mean(Speechiness, na.rm = TRUE)) %>%
gather(key = "Feature", value = "Average", -Group) %>%
ggplot(aes(x = Group, y = Average, fill = Feature)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = 'Average Audio Features for Artists that increase in Popularity vs. Artists that decreased in popularity', x = 'Group', y = 'Average Value')
filtered_data %>%
group_by(Group) %>%
summarise(Avg_Valence = mean(Valence, na.rm = TRUE),
Avg_Danceability = mean(Danceability, na.rm = TRUE),
Avg_Speechiness = mean(Speechiness, na.rm = TRUE)) %>%
gather(key = "Feature", value = "Average", -Group) %>%
ggplot(aes(x = Group, y = Average, fill = Feature)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = 'Average Audio Features for Increase vs Decrease Groups',
x = 'Group',
y = 'Average Value',
fill = 'Audio Feature') +  # This line sets the legend title
theme(plot.title = element_text(hjust = 0.5))
filtered_data %>%
group_by(Group) %>%
summarise(Avg_Valence = mean(Valence, na.rm = TRUE),
Avg_Danceability = mean(Danceability, na.rm = TRUE),
Avg_Speechiness = mean(Speechiness, na.rm = TRUE)) %>%
gather(key = "Feature", value = "Average", -Group) %>%
ggplot(aes(x = Group, y = Average, fill = Feature)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = 'Average Audio Features for Artists that increase in Popularity vs. n/ Artists that decreased in popularity',
x = 'Group',
y = 'Average Value',
fill = 'Audio Feature') +  # This line sets the legend title
theme(plot.title = element_text(hjust = 0.5))
filtered_data %>%
group_by(Group) %>%
summarise(Avg_Valence = mean(Valence, na.rm = TRUE),
Avg_Danceability = mean(Danceability, na.rm = TRUE),
Avg_Speechiness = mean(Speechiness, na.rm = TRUE)) %>%
gather(key = "Feature", value = "Average", -Group) %>%
ggplot(aes(x = Group, y = Average, fill = Feature)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = 'Average Audio Features for Artists that increase in Popularity vs. /n Artists that decreased in popularity',
x = 'Group',
y = 'Average Value',
fill = 'Audio Feature') +  # This line sets the legend title
theme(plot.title = element_text(hjust = 0.5))
filtered_data %>%
group_by(Group) %>%
summarise(Avg_Valence = mean(Valence, na.rm = TRUE),
Avg_Danceability = mean(Danceability, na.rm = TRUE),
Avg_Speechiness = mean(Speechiness, na.rm = TRUE)) %>%
gather(key = "Feature", value = "Average", -Group) %>%
ggplot(aes(x = Group, y = Average, fill = Feature)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = 'Average Audio Features for Artists that increase in Popularity vs. Artists that decreased in popularity',
x = 'Group',
y = 'Average Value',
fill = 'Audio Feature') +  # This line sets the legend title
theme(plot.title = element_text(hjust = 0.5))
filtered_data %>%
group_by(Group) %>%
summarise(Avg_Valence = mean(Valence, na.rm = TRUE),
Avg_Danceability = mean(Danceability, na.rm = TRUE),
Avg_Speechiness = mean(Speechiness, na.rm = TRUE)) %>%
gather(key = "Feature", value = "Average", -Group) %>%
ggplot(aes(x = Group, y = Average, fill = Feature)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = 'Average Audio Features for Artists that increased in Popularity\n vs. Artists that decreased in popularity',
x = 'Group',
y = 'Average Value',
fill = 'Audio Feature') +
theme(plot.title = element_text(hjust = 0.5))
View(combined_wiki_tables)
